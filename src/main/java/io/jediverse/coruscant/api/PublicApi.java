/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.jediverse.coruscant.api;

import io.jediverse.coruscant.model.Status;
import io.jediverse.coruscant.model.Account;
import io.jediverse.coruscant.model.AccountRelationship;
import io.jediverse.coruscant.model.AdminEmoji;
import io.jediverse.coruscant.model.Application;
import io.jediverse.coruscant.model.Attachment;
import io.jediverse.coruscant.model.Domain;
import io.jediverse.coruscant.model.DomainBlock;
import io.jediverse.coruscant.model.Emoji;
import io.jediverse.coruscant.model.IdFollowBody;
import io.jediverse.coruscant.model.Instance;
import io.jediverse.coruscant.model.MediaIdBody;
import io.jediverse.coruscant.model.Notification;
import io.jediverse.coruscant.model.OauthToken;
import io.jediverse.coruscant.model.SearchResult;
import io.jediverse.coruscant.model.StatusContext;
import io.jediverse.coruscant.model.UserPasswordChangeBody;
import io.jediverse.coruscant.model.V1AppsBody;
import io.jediverse.coruscant.model.V1StatusesBody;
import io.micronaut.http.*;
import io.micronaut.http.annotation.*;
import io.micronaut.http.multipart.StreamingFileUpload;
import io.reactivex.Single;
import io.swagger.v3.oas.annotations.*;
import io.swagger.v3.oas.annotations.responses.*;
import jakarta.annotation.Nullable;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;


@Controller
public class PublicApi {



    @Operation(summary = "Block account with id.", operationId = "accountBlock", description = "" , tags = {"accounts"})
    @ApiResponse(responseCode = "200", description = "Your relationship to the account.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Post(value = "/api/v1/accounts/{id}/block", produces = { "application/json" })
    public Single<HttpResponse<AccountRelationship>> accountBlock(@Parameter(description = "The id of the account to block.") @PathVariable("id") String id
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Create a new account using an application token.", operationId = "accountCreate", description = "The parameters can also be given in the body of the request, as JSON, if the content-type is set to 'application/json'. The parameters can also be given in the body of the request, as XML, if the content-type is set to 'application/xml'." , tags = {"accounts"})
    @ApiResponse(responseCode = "200", description = "An OAuth2 access token for the newly-created account.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Post(value = "/api/v1/accounts", produces = { "application/json" })
    public Single<HttpResponse<OauthToken>> accountCreate(@Nullable @Parameter(description = "Text that will be reviewed by moderators if registrations require manual approval.") @Valid @QueryValue(value = "reason") String reason
, @Nullable @Parameter(description = "The desired username for the account.") @Valid @QueryValue(value = "username") String username
, @Nullable @Parameter(description = "The email address to be used for login.") @Valid @QueryValue(value = "email") String email
, @Nullable @Parameter(description = "The password to be used for login. This will be hashed before storage.") @Valid @QueryValue(value = "password") String password
, @Nullable @Parameter(description = "The user agrees to the terms, conditions, and policies of the instance.") @Valid @QueryValue(value = "agreement") Boolean agreement
, @Nullable @Parameter(description = "The language of the confirmation email that will be sent.") @Valid @QueryValue(value = "locale") String locale
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Delete your account.", operationId = "accountDelete", description = "" , tags = {"accounts"})
    @ApiResponse(responseCode = "202", description = "The account deletion has been accepted and the account will be deleted.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Post(value = "/api/v1/accounts/delete", consumes = {"multipart/form-data"})
    public Single<HttpResponse<Void>> accountDelete(@Parameter(description = "") @QueryValue(value = "password")  String password
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Follow account with id.", operationId = "accountFollow", description = "The parameters can also be given in the body of the request, as JSON, if the content-type is set to 'application/json'. The parameters can also be given in the body of the request, as XML, if the content-type is set to 'application/xml'." , tags = {"accounts"})
    @ApiResponse(responseCode = "200", description = "Your relationship to this account.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Post(value = "/api/v1/accounts/{id}/follow", produces = { "application/json" }, consumes = {"application/json", "application/xml", "application/x-www-form-urlencoded"})
    public Single<HttpResponse<AccountRelationship>> accountFollow(@Parameter(description = "ID of the account to follow.") @PathVariable("id") String id
,@Parameter(description = "") @Valid @Body IdFollowBody body
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Follow account with id.", operationId = "accountFollow", description = "The parameters can also be given in the body of the request, as JSON, if the content-type is set to 'application/json'. The parameters can also be given in the body of the request, as XML, if the content-type is set to 'application/xml'." , tags = {"accounts"})
    @ApiResponse(responseCode = "200", description = "Your relationship to this account.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Post(value = "/api/v1/accounts/{id}/follow", produces = { "application/json" }, consumes = {"application/json", "application/xml", "application/x-www-form-urlencoded"})
    public Single<HttpResponse<AccountRelationship>> accountFollow(@Parameter(description = "ID of the account to follow.") @PathVariable("id") String id
,@Parameter(description = "") @QueryValue(value = "reblogs")  Boolean reblogs
,@Parameter(description = "") @QueryValue(value = "notify")  Boolean notify
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "See followers of account with given id.", operationId = "accountFollowers", description = "" , tags = {"accounts"})
    @ApiResponse(responseCode = "200", description = "Array of accounts that follow this account.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Get(value = "/api/v1/accounts/{id}/followers", produces = { "application/json" })
    public Single<HttpResponse<List<Account>>> accountFollowers(@Parameter(description = "Account ID.") @PathVariable("id") String id
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "See accounts followed by given account id.", operationId = "accountFollowing", description = "" , tags = {"accounts"})
    @ApiResponse(responseCode = "200", description = "Array of accounts that are followed by this account.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Get(value = "/api/v1/accounts/{id}/following")
    public Single<HttpResponse<Void>> accountFollowing(@Parameter(description = "Account ID.") @PathVariable("id") String id
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Get information about an account with the given ID.", operationId = "accountGet", description = "" , tags = {"accounts"})
    @ApiResponse(responseCode = "200", description = "The requested account.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Get(value = "/api/v1/accounts/{id}", produces = { "application/json" })
    public Single<HttpResponse<Account>> accountGet(@Parameter(description = "The id of the requested account.") @PathVariable("id") String id
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "See your account's relationships with the given account IDs.", operationId = "accountRelationships", description = "" , tags = {"accounts"})
    @ApiResponse(responseCode = "200", description = "Array of account relationships.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Get(value = "/api/v1/accounts/relationships", produces = { "application/json" })
    public Single<HttpResponse<List<AccountRelationship>>> accountRelationships(@NotNull @Parameter(description = "Account IDs.") @Valid @QueryValue(value = "id") List<String> id
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "See statuses posted by the requested account.", operationId = "accountStatuses", description = "The statuses will be returned in descending chronological order (newest first), with sequential IDs (bigger = newer)." , tags = {"accounts"})
    @ApiResponse(responseCode = "200", description = "Array of statuses.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Get(value = "/api/v1/accounts/{id}/statuses", produces = { "application/json" })
    public Single<HttpResponse<List<io.jediverse.coruscant.model.Status>>> accountStatuses(@Parameter(description = "Account ID.") @PathVariable("id") String id
, @Nullable @Parameter(description = "Number of statuses to return.") @Valid @QueryValue(value = "limit", defaultValue = "30") Integer limit
, @Nullable @Parameter(description = "Exclude statuses that are a reply to another status.") @Valid @QueryValue(value = "exclude_replies", defaultValue = "false") Boolean excludeReplies
, @Nullable @Parameter(description = "Exclude statuses that are a reblog/boost of another status.") @Valid @QueryValue(value = "exclude_reblogs", defaultValue = "false") Boolean excludeReblogs
, @Nullable @Parameter(description = "Return only statuses *OLDER* than the given max status ID. The status with the specified ID will not be included in the response.") @Valid @QueryValue(value = "max_id") String maxId
, @Nullable @Parameter(description = "Return only statuses *NEWER* than the given min status ID. The status with the specified ID will not be included in the response.") @Valid @QueryValue(value = "min_id") String minId
, @Nullable @Parameter(description = "Show only pinned statuses. In other words, exclude statuses that are not pinned to the given account ID.") @Valid @QueryValue(value = "pinned_only", defaultValue = "false") Boolean pinnedOnly
, @Nullable @Parameter(description = "Show only statuses with media attachments.") @Valid @QueryValue(value = "only_media", defaultValue = "false") Boolean onlyMedia
, @Nullable @Parameter(description = "Show only statuses with a privacy setting of 'public'.") @Valid @QueryValue(value = "only_public", defaultValue = "false") Boolean onlyPublic
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Unblock account with ID.", operationId = "accountUnblock", description = "" , tags = {"accounts"})
    @ApiResponse(responseCode = "200", description = "Your relationship to this account.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Post(value = "/api/v1/accounts/{id}/unblock", produces = { "application/json" })
    public Single<HttpResponse<AccountRelationship>> accountUnblock(@Parameter(description = "The id of the account to unblock.") @PathVariable("id") String id
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Unfollow account with id.", operationId = "accountUnfollow", description = "" , tags = {"accounts"})
    @ApiResponse(responseCode = "200", description = "Your relationship to this account.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Post(value = "/api/v1/accounts/{id}/unfollow", produces = { "application/json" })
    public Single<HttpResponse<AccountRelationship>> accountUnfollow(@Parameter(description = "The id of the account to unfollow.") @PathVariable("id") String id
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Update your account.", operationId = "accountUpdate", description = "" , tags = {"accounts"})
    @ApiResponse(responseCode = "200", description = "The newly updated account.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Patch(value = "/api/v1/accounts/update_credentials", produces = { "application/json" }, consumes = {"multipart/form-data"})
    public Single<HttpResponse<Account>> accountUpdate(@Parameter(description = "") @QueryValue(value = "discoverable")  Boolean discoverable
,@Parameter(description = "") @QueryValue(value = "bot")  Boolean bot
,@Parameter(description = "") @QueryValue(value = "display_name")  String displayName
,@Parameter(description = "") @QueryValue(value = "note")  String note
,@Parameter(description = "file detail") @Valid StreamingFileUpload avatar
,@Parameter(description = "file detail") @Valid StreamingFileUpload header
,@Parameter(description = "") @QueryValue(value = "locked")  Boolean locked
,@Parameter(description = "") @QueryValue(value = "source[privacy]")  String sourcePrivacy
,@Parameter(description = "") @QueryValue(value = "source[sensitive]")  Boolean sourceSensitive
,@Parameter(description = "") @QueryValue(value = "source[language]")  String sourceLanguage
,@Parameter(description = "") @QueryValue(value = "source[status_format]")  String sourceStatusFormat
,@Parameter(description = "") @QueryValue(value = "custom_css")  String customCss
,@Parameter(description = "") @QueryValue(value = "enable_rss")  Boolean enableRss
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Verify a token by returning account details pertaining to it.", operationId = "accountVerify", description = "" , tags = {"accounts"})
    @ApiResponse(responseCode = "200", description = "")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Get(value = "/api/v1/accounts/verify_credentials", produces = { "application/json" })
    public Single<HttpResponse<Account>> accountVerify() {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Perform an admin action on an account.", operationId = "adminAccountAction", description = "" , tags = {"admin"})
    @ApiResponse(responseCode = "200", description = "OK")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "403", description = "forbidden")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Post(value = "/api/v1/admin/accounts/{id}/action", consumes = {"multipart/form-data"})
    public Single<HttpResponse<Void>> adminAccountAction(@Parameter(description = "") @QueryValue(value = "type")  String type
,@Parameter(description = "") @QueryValue(value = "text")  String text
,@Parameter(description = "ID of the account.") @PathVariable("id") String id
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Register a new application on this instance.", operationId = "appCreate", description = "The registered application can be used to obtain an application token. This can then be used to register a new account, or (through user auth) obtain an access token.  The parameters can also be given in the body of the request, as JSON, if the content-type is set to 'application/json'. The parameters can also be given in the body of the request, as XML, if the content-type is set to 'application/xml'." , tags = {"apps"})
    @ApiResponse(responseCode = "200", description = "The newly-created application.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "403", description = "forbidden")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Post(value = "/api/v1/apps", produces = { "application/json" }, consumes = {"application/json", "application/xml", "application/x-www-form-urlencoded"})
    public Single<HttpResponse<Application>> appCreate(@Parameter(description = "") @Valid @Body V1AppsBody body
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Register a new application on this instance.", operationId = "appCreate", description = "The registered application can be used to obtain an application token. This can then be used to register a new account, or (through user auth) obtain an access token.  The parameters can also be given in the body of the request, as JSON, if the content-type is set to 'application/json'. The parameters can also be given in the body of the request, as XML, if the content-type is set to 'application/xml'." , tags = {"apps"})
    @ApiResponse(responseCode = "200", description = "The newly-created application.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "403", description = "forbidden")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Post(value = "/api/v1/apps", produces = { "application/json" }, consumes = {"application/json", "application/xml", "application/x-www-form-urlencoded"})
    public Single<HttpResponse<Application>> appCreate(@Parameter(description = "") @QueryValue(value = "client_name")  String clientName
,@Parameter(description = "") @QueryValue(value = "redirect_uris")  String redirectUris
,@Parameter(description = "") @QueryValue(value = "scopes")  String scopes
,@Parameter(description = "") @QueryValue(value = "website")  String website
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Accept/authorize follow request from the given account ID.", operationId = "authorizeFollowRequest", description = "Accept a follow request and put the requesting account in your 'followers' list." , tags = {"follow_requests"})
    @ApiResponse(responseCode = "200", description = "Your relationship to this account.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Post(value = "/api/v1/follow_requests/{account_id}/authorize", produces = { "application/json" })
    public Single<HttpResponse<AccountRelationship>> authorizeFollowRequest(@Parameter(description = "ID of the account requesting to follow you.") @PathVariable("account_id") String accountId
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Get an array of accounts that requesting account has blocked.", operationId = "blocksGet", description = "The next and previous queries can be parsed from the returned Link header. Example:  ``` <https://example.org/api/v1/blocks?limit=80&max_id=01FC0SKA48HNSVR6YKZCQGS2V8>; rel=\"next\", <https://example.org/api/v1/blocks?limit=80&min_id=01FC0SKW5JK2Q4EVAV2B462YY0>; rel=\"prev\" ````" , tags = {"blocks"})
    @ApiResponse(responseCode = "200", description = "")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Get(value = "/api/v1/blocks", produces = { "application/json" })
    public Single<HttpResponse<List<Account>>> blocksGet(@Nullable @Parameter(description = "Number of blocks to return.") @Valid @QueryValue(value = "limit", defaultValue = "20") Integer limit
,@Nullable @Parameter(description = "Return only blocks *OLDER* than the given block ID. The block with the specified ID will not be included in the response.") @Valid @QueryValue(value = "max_id") String maxId
,@Nullable @Parameter(description = "Return only blocks *NEWER* than the given block ID. The block with the specified ID will not be included in the response.") @Valid @QueryValue(value = "since_id") String sinceId
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "", operationId = "bookmarksGet", description = "Get an array of statuses bookmarked in the instance" , tags = {"bookmarks"})
    @ApiResponse(responseCode = "200", description = "Array of bookmarked statuses")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Get(value = "/api/v1/bookmarks", produces = { "application/json" })
    public Single<HttpResponse<List<io.jediverse.coruscant.model.Status>>> bookmarksGet() {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Clear/delete all notifications for currently authorized user.", operationId = "clearNotifications", description = "Will return an empty object `{}` to indicate success." , tags = {"notifications"})
    @ApiResponse(responseCode = "200", description = "")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Post(value = "/api/v1/notifications", produces = { "application/json" })
    public Single<HttpResponse<Object>> clearNotifications() {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Get an array of custom emojis available on the instance.", operationId = "customEmojisGet", description = "" , tags = {"custom_emojis"})
    @ApiResponse(responseCode = "200", description = "Array of custom emojis.")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Get(value = "/api/v1/custom_emojis", produces = { "application/json" })
    public Single<HttpResponse<List<Emoji>>> customEmojisGet() {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Create one or more domain blocks, from a string or a file.", operationId = "domainBlockCreate", description = "You have two options when using this endpoint: either you can set `import` to `true` and upload a file containing multiple domain blocks, JSON-formatted, or you can leave import as `false`, and just add one domain block.  The format of the json file should be something like: `[{\"domain\":\"example.org\"},{\"domain\":\"whatever.com\",\"public_comment\":\"they smell\"}]`" , tags = {"admin"})
    @ApiResponse(responseCode = "200", description = "The newly created domain block, if `import` != `true`. If a list has been imported, then an `array` of newly created domain blocks will be returned instead.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "403", description = "forbidden")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Post(value = "/api/v1/admin/domain_blocks", produces = { "application/json" }, consumes = {"multipart/form-data"})
    public Single<HttpResponse<DomainBlock>> domainBlockCreate(@Parameter(description = "file detail") @Valid StreamingFileUpload domains
,@Parameter(description = "") @QueryValue(value = "domain")  String domain
,@Parameter(description = "") @QueryValue(value = "obfuscate")  Boolean obfuscate
,@Parameter(description = "") @QueryValue(value = "public_comment")  String publicComment
,@Parameter(description = "") @QueryValue(value = "private_comment")  String privateComment
,@Nullable @Parameter(description = "Signal that a list of domain blocks is being imported as a file. If set to `true`, then 'domains' must be present as a JSON-formatted file. If set to `false`, then `domains` will be ignored, and `domain` must be present.") @Valid @QueryValue(value = "import", defaultValue = "false") Boolean _import
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Delete domain block with the given ID.", operationId = "domainBlockDelete", description = "" , tags = {"admin"})
    @ApiResponse(responseCode = "200", description = "The domain block that was just deleted.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "403", description = "forbidden")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Delete(value = "/api/v1/admin/domain_blocks/{id}", produces = { "application/json" })
    public Single<HttpResponse<DomainBlock>> domainBlockDelete(@Parameter(description = "The id of the domain block.") @PathVariable("id") String id
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "View domain block with the given ID.", operationId = "domainBlockGet", description = "" , tags = {"admin"})
    @ApiResponse(responseCode = "200", description = "The requested domain block.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "403", description = "forbidden")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Get(value = "/api/v1/admin/domain_blocks/{id}", produces = { "application/json" })
    public Single<HttpResponse<DomainBlock>> domainBlockGet(@Parameter(description = "The id of the domain block.") @PathVariable("id") String id
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "View all domain blocks currently in place.", operationId = "domainBlocksGet", description = "" , tags = {"admin"})
    @ApiResponse(responseCode = "200", description = "All domain blocks currently in place.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "403", description = "forbidden")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Get(value = "/api/v1/admin/domain_blocks", produces = { "application/json" })
    public Single<HttpResponse<List<DomainBlock>>> domainBlocksGet(@Nullable @Parameter(description = "If set to `true`, then each entry in the returned list of domain blocks will only consist of the fields `domain` and `public_comment`. This is perfect for when you want to save and share a list of all the domains you have blocked on your instance, so that someone else can easily import them, but you don't want them to see the database IDs of your blocks, or private comments etc.") @Valid @QueryValue(value = "export") Boolean export
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Upload and create a new instance emoji.", operationId = "emojiCreate", description = "" , tags = {"admin"})
    @ApiResponse(responseCode = "200", description = "The newly-created emoji.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "403", description = "forbidden")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "409", description = "conflict -- shortcode for this emoji is already in use")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Post(value = "/api/v1/admin/custom_emojis", produces = { "application/json" }, consumes = {"multipart/form-data"})
    public Single<HttpResponse<Emoji>> emojiCreate(@Parameter(description = "") @QueryValue(value = "shortcode")  String shortcode
,@Parameter(description = "file detail") @Valid StreamingFileUpload image
,@Parameter(description = "") @QueryValue(value = "category")  String category
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Delete a **local** emoji with the given ID from the instance.", operationId = "emojiDelete", description = "Emoji with the given ID will no longer be available to use on the instance.  If you just want to update the emoji image instead, use the `/api/v1/admin/custom_emojis/{id}` PATCH route.  To disable emojis from **remote** instances, use the `/api/v1/admin/custom_emojis/{id}` PATCH route." , tags = {"admin"})
    @ApiResponse(responseCode = "200", description = "The deleted emoji will be returned to the caller in case further processing is necessary.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "403", description = "forbidden")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Delete(value = "/api/v1/admin/custom_emojis/{id}", produces = { "application/json" })
    public Single<HttpResponse<AdminEmoji>> emojiDelete(@Parameter(description = "The id of the emoji.") @PathVariable("id") String id
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Get the admin view of a single emoji.", operationId = "emojiGet", description = "" , tags = {"admin"})
    @ApiResponse(responseCode = "200", description = "A single emoji.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "403", description = "forbidden")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Get(value = "/api/v1/admin/custom_emojis/{id}", produces = { "application/json" })
    public Single<HttpResponse<AdminEmoji>> emojiGet(@Parameter(description = "The id of the emoji.") @PathVariable("id") String id
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Perform admin action on a local or remote emoji known to this instance.", operationId = "emojiUpdate", description = "Action performed depends upon the action `type` provided.  `disable`: disable a REMOTE emoji from being used/displayed on this instance. Does not work for local emojis.  `copy`: copy a REMOTE emoji to this instance. When doing this action, a shortcode MUST be provided, and it must be unique among emojis already present on this instance. A category MAY be provided, and the copied emoji will then be put into the provided category.  `modify`: modify a LOCAL emoji. You can provide a new image for the emoji and/or update the category.  Local emojis cannot be deleted using this endpoint. To delete a local emoji, check DELETE /api/v1/admin/custom_emojis/{id} instead." , tags = {"admin"})
    @ApiResponse(responseCode = "200", description = "The updated emoji.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "403", description = "forbidden")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Patch(value = "/api/v1/admin/custom_emojis/{id}", produces = { "application/json" }, consumes = {"multipart/form-data"})
    public Single<HttpResponse<AdminEmoji>> emojiUpdate(@Parameter(description = "") @QueryValue(value = "type")  String type
,@Parameter(description = "") @QueryValue(value = "shortcode")  String shortcode
,@Parameter(description = "file detail") @Valid StreamingFileUpload image
,@Parameter(description = "") @QueryValue(value = "category")  String category
,@Parameter(description = "The id of the emoji.") @PathVariable("id") String id
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "View local and remote emojis available to / known by this instance.", operationId = "emojisGet", description = "The next and previous queries can be parsed from the returned Link header. Example:  `<http://localhost:8080/api/v1/admin/custom_emojis?limit=30&max_shortcode_domain=yell@fossbros-anonymous.io&filter=domain:all>; rel=\"next\", <http://localhost:8080/api/v1/admin/custom_emojis?limit=30&min_shortcode_domain=rainbow@&filter=domain:all>; rel=\"prev\"`" , tags = {"admin"})
    @ApiResponse(responseCode = "200", description = "An array of emojis, arranged alphabetically by shortcode and domain.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "403", description = "forbidden")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Get(value = "/api/v1/admin/custom_emojis", produces = { "application/json" })
    public Single<HttpResponse<List<AdminEmoji>>> emojisGet(@Nullable @Parameter(description = "Comma-separated list of filters to apply to results. Recognized filters are:  `domain:[domain]` -- show emojis from the given domain, eg `?filter=domain:example.org` will show emojis from `example.org` only. Instead of giving a specific domain, you can also give either one of the key words `local` or `all` to show either local emojis only (`domain:local`) or show all emojis from all domains (`domain:all`). Note: `domain:*` is equivalent to `domain:all` (including local). If no domain filter is provided, `domain:all` will be assumed.  `disabled` -- include emojis that have been disabled.  `enabled` -- include emojis that are enabled.  `shortcode:[shortcode]` -- show only emojis with the given shortcode, eg `?filter=shortcode:blob_cat_uwu` will show only emojis with the shortcode `blob_cat_uwu` (case sensitive).  If neither `disabled` or `enabled` are provided, both disabled and enabled emojis will be shown.  If no filter query string is provided, the public `domain:all` will be used, which will show all emojis from all domains.") @Valid @QueryValue(value = "filter", defaultValue = "domain:all") String filter
,@Nullable @Parameter(description = "Number of emojis to return. Less than 1, or not set, means unlimited (all emojis).") @Valid @QueryValue(value = "limit", defaultValue = "50") Integer limit
,@Nullable @Parameter(description = "Return only emojis with `[shortcode]@[domain]` *LOWER* (alphabetically) than given `[shortcode]@[domain]`. For example, if `max_shortcode_domain=beep@example.org`, then returned values might include emojis with `[shortcode]@[domain]`s like `car@example.org`, `debian@aaa.com`, `test@` (local emoji), etc. Emoji with the given `[shortcode]@[domain]` will not be included in the result set.") @Valid @QueryValue(value = "max_shortcode_domain") String maxShortcodeDomain
,@Nullable @Parameter(description = "Return only emojis with `[shortcode]@[domain]` *HIGHER* (alphabetically) than given `[shortcode]@[domain]`. For example, if `max_shortcode_domain=beep@example.org`, then returned values might include emojis with `[shortcode]@[domain]`s like `arse@test.com`, `0101_binary@hackers.net`, `bee@` (local emoji), etc. Emoji with the given `[shortcode]@[domain]` will not be included in the result set.") @Valid @QueryValue(value = "min_shortcode_domain") String minShortcodeDomain
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Get an array of statuses that the requesting account has favourited.", operationId = "favouritesGet", description = "The next and previous queries can be parsed from the returned Link header. Example:  ``` <https://example.org/api/v1/favourites?limit=80&max_id=01FC0SKA48HNSVR6YKZCQGS2V8>; rel=\"next\", <https://example.org/api/v1/favourites?limit=80&min_id=01FC0SKW5JK2Q4EVAV2B462YY0>; rel=\"prev\" ````" , tags = {"favourites"})
    @ApiResponse(responseCode = "200", description = "")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Get(value = "/api/v1/favourites", produces = { "application/json" })
    public Single<HttpResponse<List<io.jediverse.coruscant.model.Status>>> favouritesGet(@Nullable @Parameter(description = "Number of statuses to return.") @Valid @QueryValue(value = "limit", defaultValue = "20") Integer limit
, @Nullable @Parameter(description = "Return only favourited statuses *OLDER* than the given favourite ID. The status with the corresponding fave ID will not be included in the response.") @Valid @QueryValue(value = "max_id") String maxId
, @Nullable @Parameter(description = "Return only favourited statuses *NEWER* than the given favourite ID. The status with the corresponding fave ID will not be included in the response.") @Valid @QueryValue(value = "min_id") String minId
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Get an array of accounts that have requested to follow you.", operationId = "getFollowRequests", description = "Accounts will be sorted in order of follow request date descending (newest first)." , tags = {"follow_requests"})
    @ApiResponse(responseCode = "200", description = "")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Get(value = "/api/v1/follow_requests", produces = { "application/json" })
    public Single<HttpResponse<List<Account>>> getFollowRequests(@Nullable @Parameter(description = "Number of accounts to return.") @Valid @QueryValue(value = "limit", defaultValue = "40") Integer limit
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "See statuses/posts by accounts you follow.", operationId = "homeTimeline", description = "The statuses will be returned in descending chronological order (newest first), with sequential IDs (bigger = newer).  The returned Link header can be used to generate the previous and next queries when scrolling up or down a timeline.  Example:  ``` <https://example.org/api/v1/timelines/home?limit=20&max_id=01FC3GSQ8A3MMJ43BPZSGEG29M>; rel=\"next\", <https://example.org/api/v1/timelines/home?limit=20&min_id=01FC3KJW2GYXSDDRA6RWNDM46M>; rel=\"prev\" ````" , tags = {"timelines"})
    @ApiResponse(responseCode = "200", description = "Array of statuses.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @Get(value = "/api/v1/timelines/home", produces = { "application/json" })
    public Single<HttpResponse<List<io.jediverse.coruscant.model.Status>>> homeTimeline(@Nullable @Parameter(description = "Return only statuses *OLDER* than the given max status ID. The status with the specified ID will not be included in the response.") @Valid @QueryValue(value = "max_id") String maxId
, @Nullable @Parameter(description = "Return only statuses *NEWER* than the given since status ID. The status with the specified ID will not be included in the response.") @Valid @QueryValue(value = "since_id") String sinceId
, @Nullable @Parameter(description = "Return only statuses *NEWER* than the given since status ID. The status with the specified ID will not be included in the response.") @Valid @QueryValue(value = "min_id") String minId
, @Nullable @Parameter(description = "Number of statuses to return.") @Valid @QueryValue(value = "limit", defaultValue = "20") Integer limit
, @Nullable @Parameter(description = "Show only statuses posted by local accounts.") @Valid @QueryValue(value = "local", defaultValue = "false") Boolean local
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "View instance information.", operationId = "instanceGet", description = "" , tags = {"instance"})
    @ApiResponse(responseCode = "200", description = "Instance information.")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal error")
    @Get(value = "/api/v1/instance", produces = { "application/json" })
    public Single<HttpResponse<Instance>> instanceGet() {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "", operationId = "instancePeersGet", description = "" , tags = {"instance"})
    @ApiResponse(responseCode = "200", description = "If no filter parameter is provided, or filter is empty, then a legacy, Mastodon-API compatible response will be returned. This will consist of just a 'flat' array of strings like `[\"example.com\", \"example.org\"]`, which corresponds to domains this instance peers with.  If a filter parameter is provided, then an array of objects with at least a `domain` key set on each object will be returned.  Domains that are silenced or suspended will also have a key `suspended_at` or `silenced_at` that contains an iso8601 date string. If one of these keys is not present on the domain object, it is open. Suspended instances may in some cases be obfuscated, which means they will have some letters replaced by `*` to make it more difficult for bad actors to target instances with harassment.  Whether a flat response or a more detailed response is returned, domains will be sorted alphabetically by hostname.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "403", description = "forbidden")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Get(value = "/api/v1/instance/peers", produces = { "application/json" })
    public Single<HttpResponse<List<Domain>>> instancePeersGet(@Nullable @Parameter(description = "Comma-separated list of filters to apply to results. Recognized filters are:   - `open` -- include peers that are not suspended or silenced   - `suspended` -- include peers that have been suspended.  If filter is `open`, only instances that haven't been suspended or silenced will be returned.  If filter is `suspended`, only suspended instances will be shown.  If filter is `open,suspended`, then all known instances will be returned.  If filter is an empty string or not set, then `open` will be assumed as the default.") @Valid @QueryValue(value = "filter", defaultValue = "open") String filter
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Update your instance information and/or upload a new avatar/header for the instance.", operationId = "instanceUpdate", description = "This requires admin permissions on the instance." , tags = {"instance"})
    @ApiResponse(responseCode = "200", description = "The newly updated instance.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "403", description = "forbidden")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Patch(value = "/api/v1/instance", produces = { "application/json" }, consumes = {"multipart/form-data"})
    public Single<HttpResponse<Instance>> instanceUpdate(@Parameter(description = "") @QueryValue(value = "title")  String title
,@Parameter(description = "") @QueryValue(value = "contact_username")  String contactUsername
,@Parameter(description = "") @QueryValue(value = "contact_email")  String contactEmail
,@Parameter(description = "") @QueryValue(value = "short_description")  String shortDescription
,@Parameter(description = "") @QueryValue(value = "description")  String description
,@Parameter(description = "") @QueryValue(value = "terms")  String terms
,@Parameter(description = "file detail") @Valid StreamingFileUpload thumbnail
,@Parameter(description = "") @QueryValue(value = "thumbnail_description")  String thumbnailDescription
,@Parameter(description = "file detail") @Valid StreamingFileUpload header
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Clean up remote media older than the specified number of days.", operationId = "mediaCleanup", description = "Also cleans up unused headers + avatars from the media cache." , tags = {"admin"})
    @ApiResponse(responseCode = "200", description = "Echos the number of days requested. The cleanup is performed asynchronously after the request completes.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "403", description = "forbidden")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Post(value = "/api/v1/admin/media_cleanup")
    public Single<HttpResponse<Void>> mediaCleanup(@Nullable @Parameter(description = "Number of days of remote media to keep. Native values will be treated as 0. If value is not specified, the value of media-remote-cache-days in the server config will be used.") @Valid @QueryValue(value = "remote_cache_days") Long remoteCacheDays
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Upload a new media attachment.", operationId = "mediaCreate", description = "" , tags = {"media"})
    @ApiResponse(responseCode = "200", description = "The newly-created media attachment.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "422", description = "unprocessable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Post(value = "/api/{api_version}/media", produces = { "application/json" }, consumes = {"multipart/form-data"})
    public Single<HttpResponse<Attachment>> mediaCreate(@Parameter(description = "") @QueryValue(value = "description")  String description
,@Parameter(description = "") @QueryValue(value = "focus")  String focus
,@Parameter(description = "file detail") @Valid StreamingFileUpload file
,@Parameter(description = "Version of the API to use. Must be either `v1` or `v2`.") @PathVariable("api_version") String apiVersion
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Get a media attachment that you own.", operationId = "mediaGet", description = "" , tags = {"media"})
    @ApiResponse(responseCode = "200", description = "The requested media attachment.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Get(value = "/api/v1/media/{id}", produces = { "application/json" })
    public Single<HttpResponse<Attachment>> mediaGet(@Parameter(description = "id of the attachment") @PathVariable("id") String id
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Refetch media specified in the database but missing from storage.", operationId = "mediaRefetch", description = "Currently, this only includes remote emojis. This endpoint is useful when data loss has occurred, and you want to try to recover to a working state." , tags = {"admin"})
    @ApiResponse(responseCode = "202", description = "Request accepted and will be processed. Check the logs for progress / errors.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "403", description = "forbidden")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Post(value = "/api/v1/admin/media_refetch")
    public Single<HttpResponse<Void>> mediaRefetch(@Nullable @Parameter(description = "Domain to refetch media from. If empty, all domains will be refetched.") @Valid @QueryValue(value = "domain") String domain
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Update a media attachment.", operationId = "mediaUpdate", description = "You must own the media attachment, and the attachment must not yet be attached to a status.  The parameters can also be given in the body of the request, as JSON, if the content-type is set to 'application/json'. The parameters can also be given in the body of the request, as XML, if the content-type is set to 'application/xml'." , tags = {"media"})
    @ApiResponse(responseCode = "200", description = "The newly-updated media attachment.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Put(value = "/api/v1/media/{id}", produces = { "application/json" }, consumes = {"application/json", "application/xml", "application/x-www-form-urlencoded"})
    public Single<HttpResponse<Attachment>> mediaUpdate(@Parameter(description = "id of the attachment to update") @PathVariable("id") String id
,@Parameter(description = "") @Valid @Body MediaIdBody body
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Update a media attachment.", operationId = "mediaUpdate", description = "You must own the media attachment, and the attachment must not yet be attached to a status.  The parameters can also be given in the body of the request, as JSON, if the content-type is set to 'application/json'. The parameters can also be given in the body of the request, as XML, if the content-type is set to 'application/xml'." , tags = {"media"})
    @ApiResponse(responseCode = "200", description = "The newly-updated media attachment.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Put(value = "/api/v1/media/{id}", produces = { "application/json" }, consumes = {"application/json", "application/xml", "application/x-www-form-urlencoded"})
    public Single<HttpResponse<Attachment>> mediaUpdate(@Parameter(description = "id of the attachment to update") @PathVariable("id") String id
,@Parameter(description = "") @QueryValue(value = "description")  String description
,@Parameter(description = "") @QueryValue(value = "focus")  String focus
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Get notifications for currently authorized user.", operationId = "notifications", description = "The notifications will be returned in descending chronological order (newest first), with sequential IDs (bigger = newer).  The next and previous queries can be parsed from the returned Link header. Example:  ``` <https://example.org/api/v1/notifications?limit=80&max_id=01FC0SKA48HNSVR6YKZCQGS2V8>; rel=\"next\", <https://example.org/api/v1/notifications?limit=80&since_id=01FC0SKW5JK2Q4EVAV2B462YY0>; rel=\"prev\" ````" , tags = {"notifications"})
    @ApiResponse(responseCode = "200", description = "Array of notifications.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Get(value = "/api/v1/notifications", produces = { "application/json" })
    public Single<HttpResponse<List<Notification>>> notifications(@Nullable @Parameter(description = "Number of notifications to return.") @Valid @QueryValue(value = "limit", defaultValue = "20") Integer limit
, @Nullable @Parameter(description = "") @Valid @QueryValue(value = "exclude_types") List<String> excludeTypes
, @Nullable @Parameter(description = "Return only notifications *OLDER* than the given max status ID. The status with the specified ID will not be included in the response.") @Valid @QueryValue(value = "max_id") String maxId
, @Nullable @Parameter(description = "Return only notifications *NEWER* than the given since status ID. The status with the specified ID will not be included in the response.") @Valid @QueryValue(value = "since_id") String sinceId
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "See public statuses/posts that your instance is aware of.", operationId = "publicTimeline", description = "The statuses will be returned in descending chronological order (newest first), with sequential IDs (bigger = newer).  The returned Link header can be used to generate the previous and next queries when scrolling up or down a timeline.  Example:  ``` <https://example.org/api/v1/timelines/public?limit=20&max_id=01FC3GSQ8A3MMJ43BPZSGEG29M>; rel=\"next\", <https://example.org/api/v1/timelines/public?limit=20&min_id=01FC3KJW2GYXSDDRA6RWNDM46M>; rel=\"prev\" ````" , tags = {"timelines"})
    @ApiResponse(responseCode = "200", description = "Array of statuses.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @Get(value = "/api/v1/timelines/public", produces = { "application/json" })
    public Single<HttpResponse<List<io.jediverse.coruscant.model.Status>>> publicTimeline(@Nullable @Parameter(description = "Return only statuses *OLDER* than the given max status ID. The status with the specified ID will not be included in the response.") @Valid @QueryValue(value = "max_id") String maxId
, @Nullable @Parameter(description = "Return only statuses *NEWER* than the given since status ID. The status with the specified ID will not be included in the response.") @Valid @QueryValue(value = "since_id") String sinceId
, @Nullable @Parameter(description = "Return only statuses *NEWER* than the given since status ID. The status with the specified ID will not be included in the response.") @Valid @QueryValue(value = "min_id") String minId
, @Nullable @Parameter(description = "Number of statuses to return.") @Valid @QueryValue(value = "limit", defaultValue = "20") Integer limit
, @Nullable @Parameter(description = "Show only statuses posted by local accounts.") @Valid @QueryValue(value = "local", defaultValue = "false") Boolean local
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Reject/deny follow request from the given account ID.", operationId = "rejectFollowRequest", description = "" , tags = {"follow_requests"})
    @ApiResponse(responseCode = "200", description = "Your relationship to this account.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Post(value = "/api/v1/follow_requests/{account_id}/reject", produces = { "application/json" })
    public Single<HttpResponse<AccountRelationship>> rejectFollowRequest(@Parameter(description = "ID of the account requesting to follow you.") @PathVariable("account_id") String accountId
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Search for statuses, accounts, or hashtags, on this instance or elsewhere.", operationId = "searchGet", description = "If statuses are in the result, they will be returned in descending chronological order (newest first), with sequential IDs (bigger = newer)." , tags = {"search"})
    @ApiResponse(responseCode = "200", description = "Results of the search.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Get(value = "/api/v1/search", produces = { "*/*" })
    public Single<HttpResponse<List<SearchResult>>> searchGet(@NotNull @Parameter(description = "Type of the search query to perform.  Must be one of: `accounts`, `hashtags`, `statuses`.") @Valid @QueryValue(value = "type") String type
, @NotNull @Parameter(description = "String to use as a search query.  For accounts, this should be in the format `@someaccount@some.instance.com`, or the format `https://some.instance.com/@someaccount`  For a status, this can be in the format: `https://some.instance.com/@someaccount/SOME_ID_OF_A_STATUS`") @Valid @QueryValue(value = "q") String q
, @Nullable @Parameter(description = "If type is `statuses`, then statuses returned will be authored only by this account.") @Valid @QueryValue(value = "account_id") String accountId
, @Nullable @Parameter(description = "Return results *older* than this id.  The entry with this ID will not be included in the search results.") @Valid @QueryValue(value = "max_id") String maxId
, @Nullable @Parameter(description = "Return results *newer* than this id.  The entry with this ID will not be included in the search results.") @Valid @QueryValue(value = "min_id") String minId
, @Nullable @Parameter(description = "Filter out tags that haven't been reviewed and approved by an instance admin.") @Valid @QueryValue(value = "exclude_unreviewed", defaultValue = "false") Boolean excludeUnreviewed
, @Nullable @Parameter(description = "Attempt to resolve the query by performing a remote webfinger lookup, if the query includes a remote host.") @Valid @QueryValue(value = "resolve", defaultValue = "false") Boolean resolve
, @Nullable @Min(1L) @Max(40L) @Parameter(description = "Maximum number of results to load, per type.") @Valid @QueryValue(value = "limit", defaultValue = "20") Long limit
, @Nullable @Parameter(description = "Offset for paginating search results.") @Valid @QueryValue(value = "offset", defaultValue = "0") Long offset
, @Nullable @Parameter(description = "Only include accounts that the searching account is following.") @Valid @QueryValue(value = "following", defaultValue = "false") Boolean following
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Bookmark status with the given ID.", operationId = "statusBookmark", description = "" , tags = {"statuses"})
    @ApiResponse(responseCode = "200", description = "The status.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "403", description = "forbidden")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Post(value = "/api/v1/statuses/{id}/bookmark", produces = { "application/json" })
    public Single<HttpResponse<io.jediverse.coruscant.model.Status>> statusBookmark(@Parameter(description = "Target status ID.") @PathVariable("id") String id
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "View accounts that have reblogged/boosted the target status.", operationId = "statusBoostedBy", description = "" , tags = {"statuses"})
    @ApiResponse(responseCode = "200", description = "")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "403", description = "forbidden")
    @ApiResponse(responseCode = "404", description = "not found")
    @Get(value = "/api/v1/statuses/{id}/reblogged_by", produces = { "application/json" })
    public Single<HttpResponse<List<Account>>> statusBoostedBy(@Parameter(description = "Target status ID.") @PathVariable("id") String id
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Return ancestors and descendants of the given status.", operationId = "statusContext", description = "The returned statuses will be ordered in a thread structure, so they are suitable to be displayed in the order in which they were returned." , tags = {"statuses"})
    @ApiResponse(responseCode = "200", description = "Status context object.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "403", description = "forbidden")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Get(value = "/api/v1/statuses/{id}/context", produces = { "application/json" })
    public Single<HttpResponse<StatusContext>> statusContext(@Parameter(description = "Target status ID.") @PathVariable("id") String id
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Create a new status.", operationId = "statusCreate", description = "The parameters can also be given in the body of the request, as JSON, if the content-type is set to 'application/json'. The parameters can also be given in the body of the request, as XML, if the content-type is set to 'application/xml'." , tags = {"statuses"})
    @ApiResponse(responseCode = "200", description = "The newly created status.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "403", description = "forbidden")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Post(value = "/api/v1/statuses", produces = { "application/json" }, consumes = {"application/json", "application/xml", "application/x-www-form-urlencoded"})
    public Single<HttpResponse<io.jediverse.coruscant.model.Status>> statusCreate(@Parameter(description = "") @Valid @Body V1StatusesBody body
, @Nullable @Parameter(description = "This status will be federated beyond the local timeline(s).") @Valid @QueryValue(value = "federated") Boolean federated
, @Nullable @Parameter(description = "This status can be boosted/reblogged.") @Valid @QueryValue(value = "boostable") Boolean boostable
, @Nullable @Parameter(description = "This status can be replied to.") @Valid @QueryValue(value = "replyable") Boolean replyable
, @Nullable @Parameter(description = "This status can be liked/faved.") @Valid @QueryValue(value = "likeable") Boolean likeable
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Create a new status.", operationId = "statusCreate", description = "The parameters can also be given in the body of the request, as JSON, if the content-type is set to 'application/json'. The parameters can also be given in the body of the request, as XML, if the content-type is set to 'application/xml'." , tags = {"statuses"})
    @ApiResponse(responseCode = "200", description = "The newly created status.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "403", description = "forbidden")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Post(value = "/api/v1/statuses", produces = { "application/json" }, consumes = {"application/json", "application/xml", "application/x-www-form-urlencoded"})
    public Single<HttpResponse<io.jediverse.coruscant.model.Status>> statusCreate(@Parameter(description = "") @QueryValue(value = "status")  String status
, @Parameter(description = "") @QueryValue(value = "media_ids")  List<String> mediaIds
, @Parameter(description = "") @QueryValue(value = "in_reply_to_id")  String inReplyToId
, @Parameter(description = "") @QueryValue(value = "sensitive")  Boolean sensitive
, @Parameter(description = "") @QueryValue(value = "spoiler_text")  String spoilerText
, @Parameter(description = "") @QueryValue(value = "visibility")  String visibility
, @Parameter(description = "") @QueryValue(value = "scheduled_at")  String scheduledAt
, @Parameter(description = "") @QueryValue(value = "language")  String language
, @Parameter(description = "") @QueryValue(value = "format")  String format
, @Nullable @Parameter(description = "This status will be federated beyond the local timeline(s).") @Valid @QueryValue(value = "federated") Boolean federated
, @Nullable @Parameter(description = "This status can be boosted/reblogged.") @Valid @QueryValue(value = "boostable") Boolean boostable
, @Nullable @Parameter(description = "This status can be replied to.") @Valid @QueryValue(value = "replyable") Boolean replyable
, @Nullable @Parameter(description = "This status can be liked/faved.") @Valid @QueryValue(value = "likeable") Boolean likeable
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Delete status with the given ID. The status must belong to you.", operationId = "statusDelete", description = "The deleted status will be returned in the response. The `text` field will contain the original text of the status as it was submitted. This is useful when doing a 'delete and redraft' type operation." , tags = {"statuses"})
    @ApiResponse(responseCode = "200", description = "The status that was just deleted.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "403", description = "forbidden")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Delete(value = "/api/v1/statuses/{id}", produces = { "application/json" })
    public Single<HttpResponse<io.jediverse.coruscant.model.Status>> statusDelete(@Parameter(description = "Target status ID.") @PathVariable("id") String id
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Star/like/favourite the given status, if permitted.", operationId = "statusFave", description = "" , tags = {"statuses"})
    @ApiResponse(responseCode = "200", description = "The newly faved status.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "403", description = "forbidden")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Post(value = "/api/v1/statuses/{id}/favourite", produces = { "application/json" })
    public Single<HttpResponse<io.jediverse.coruscant.model.Status>> statusFave(@Parameter(description = "Target status ID.") @PathVariable("id") String id
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "View accounts that have faved/starred/liked the target status.", operationId = "statusFavedBy", description = "" , tags = {"statuses"})
    @ApiResponse(responseCode = "200", description = "")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "403", description = "forbidden")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Get(value = "/api/v1/statuses/{id}/favourited_by", produces = { "application/json" })
    public Single<HttpResponse<List<Account>>> statusFavedBy(@Parameter(description = "Target status ID.") @PathVariable("id") String id
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "View status with the given ID.", operationId = "statusGet", description = "" , tags = {"statuses"})
    @ApiResponse(responseCode = "200", description = "The requested status.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "403", description = "forbidden")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Get(value = "/api/v1/statuses/{id}", produces = { "application/json" })
    public Single<HttpResponse<io.jediverse.coruscant.model.Status>> statusGet(@Parameter(description = "Target status ID.") @PathVariable("id") String id
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Reblog/boost status with the given ID.", operationId = "statusReblog", description = "If the target status is rebloggable/boostable, it will be shared with your followers. This is equivalent to an ActivityPub 'Announce' activity." , tags = {"statuses"})
    @ApiResponse(responseCode = "200", description = "The boost of the status.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "403", description = "forbidden")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Post(value = "/api/v1/statuses/{id}/reblog", produces = { "application/json" })
    public Single<HttpResponse<io.jediverse.coruscant.model.Status>> statusReblog(@Parameter(description = "Target status ID.") @PathVariable("id") String id
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Unbookmark status with the given ID.", operationId = "statusUnbookmark", description = "" , tags = {"statuses"})
    @ApiResponse(responseCode = "200", description = "The status.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "403", description = "forbidden")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Post(value = "/api/v1/statuses/{id}/unbookmark", produces = { "application/json" })
    public Single<HttpResponse<io.jediverse.coruscant.model.Status>> statusUnbookmark(@Parameter(description = "Target status ID.") @PathVariable("id") String id
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Unstar/unlike/unfavourite the given status.", operationId = "statusUnfave", description = "" , tags = {"statuses"})
    @ApiResponse(responseCode = "200", description = "The unfaved status.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "403", description = "forbidden")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Post(value = "/api/v1/statuses/{id}/unfavourite", produces = { "application/json" })
    public Single<HttpResponse<io.jediverse.coruscant.model.Status>> statusUnfave(@Parameter(description = "Target status ID.") @PathVariable("id") String id
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Unreblog/unboost status with the given ID.", operationId = "statusUnreblog", description = "" , tags = {"statuses"})
    @ApiResponse(responseCode = "200", description = "The unboosted status.")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "403", description = "forbidden")
    @ApiResponse(responseCode = "404", description = "not found")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal server error")
    @Post(value = "/api/v1/statuses/{id}/unreblog", produces = { "application/json" })
    public Single<HttpResponse<Status>> statusUnreblog(@Parameter(description = "Target status ID.") @PathVariable("id") String id
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Initiate a websocket connection for live streaming of statuses and notifications.", operationId = "streamGet", description = "The scheme used should *always* be `wss`. The streaming basepath can be viewed at `/api/v1/instance`.  On a successful connection, a code `101` will be returned, which indicates that the connection is being upgraded to a secure websocket connection.  As long as the connection is open, various message types will be streamed into it.  We will ping the connection every 30 seconds to check whether the client is still receiving.  If the ping fails, or something else goes wrong during transmission, then the connection will be dropped, and the client will be expected to start it again." , tags = {"streaming"})
    @ApiResponse(responseCode = "101", description = "")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @Get(value = "/api/v1/streaming", produces = { "application/json" })
    public Single<HttpResponse<Void>> streamGet(@NotNull @Parameter(description = "Access token for the requesting account.") @Valid @QueryValue(value = "access_token") String accessToken
,@NotNull @Parameter(description = "Type of stream to request.  Options are:  `user`: receive updates for the account's home timeline. `public`: receive updates for the public timeline. `public:local`: receive updates for the local timeline. `hashtag`: receive updates for a given hashtag. `hashtag:local`: receive local updates for a given hashtag. `list`: receive updates for a certain list of accounts. `direct`: receive updates for direct messages.") @Valid @QueryValue(value = "stream") String stream
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Change the password of authenticated user.", operationId = "userPasswordChange", description = "The parameters can also be given in the body of the request, as JSON, if the content-type is set to 'application/json'. The parameters can also be given in the body of the request, as XML, if the content-type is set to 'application/xml'." , tags = {"user"})
    @ApiResponse(responseCode = "200", description = "Change successful")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "403", description = "forbidden")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal error")
    @Post(value = "/api/v1/user/password_change", consumes = {"application/json", "application/xml", "application/x-www-form-urlencoded"})
    public Single<HttpResponse<Void>> userPasswordChange(@Parameter(description = "") @Valid @Body UserPasswordChangeBody body
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Change the password of authenticated user.", operationId = "userPasswordChange", description = "The parameters can also be given in the body of the request, as JSON, if the content-type is set to 'application/json'. The parameters can also be given in the body of the request, as XML, if the content-type is set to 'application/xml'." , tags = {"user"})
    @ApiResponse(responseCode = "200", description = "Change successful")
    @ApiResponse(responseCode = "400", description = "bad request")
    @ApiResponse(responseCode = "401", description = "unauthorized")
    @ApiResponse(responseCode = "403", description = "forbidden")
    @ApiResponse(responseCode = "406", description = "not acceptable")
    @ApiResponse(responseCode = "500", description = "internal error")
    @Post(value = "/api/v1/user/password_change", consumes = {"application/json", "application/xml", "application/x-www-form-urlencoded"})
    public Single<HttpResponse<Void>> userPasswordChange(@Parameter(description = "") @QueryValue(value = "old_password")  String oldPassword
,@Parameter(description = "") @QueryValue(value = "new_password")  String newPassword
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }

}
